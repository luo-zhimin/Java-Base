package com.java.base.day.binaryAndOperator;

public class DisplacementDetail {
    public static void main(String[] args) {
        /*
         * 位运算
         * java 中有 7 个位运算(&、|、^、~、>>、<<和 >>>)
         * & 按位与  俩个全为1 结果为1 否则十0
         * | 按位或  俩个有一个为1 结果为1 否则十0
         * ^ 按位异或 俩个有一个为1一个为0 结果为1 否则十0
         * ~ 按位取反 0->1 1->0
         *
         * 1) 算术右移 >>：低位溢出,符号位不变,并用符号位补溢出的高位 本质是 a/b/b
         * 2) 算术左移 <<: 符号位不变,低位补 0  本质是 a*b*b
         * 3) >>> 逻辑右移也叫无符号右移,运算规则是: 低位溢出，高位补 0
         * 4) 特别说明：没有 <<< 符号
         */

        //2 int 4byte 2的补码->2的原码
        /*
         * 正数的原码 补码 反码 3码一致
         * 2的原码(4个byte) 00000000 00000000 00000000 00000010
         * 3的补码 00000000 00000000 00000000 00000011
         * 按位& 俩个全为1 结果为1 否则十0
         * 00000000 00000000 00000000 00000010 运算后的是补码
         */
        System.out.println(2 & 3);//2

        /*
         * 负数的反码=他的原码符号位不变，其他位数取反(0->1 1->0)
         * 负数的补码 = 他的反码+1 负数的反码=他的补码-1
         * 2的原码 00000000 00000000 00000000 00000010
         * -2(原) 10000000 00000000 00000000 00000010
         * (反) 11111111 11111111 11111111 11111101
         * (补) 11111111 11111111 11111111 11111110
         * 操作 ~
         * 00000000 00000000 00000000 00000001
         */
        System.out.println(~-2);//1

        /*
         * ~ 按位取反
         * (补)00000000 00000000 00000000 00000010
         * (~的补码 负数(补码)->原码) 11111111 11111111 11111111 11111101
         * ~反码 11111111 11111111 11111111 11111100 -1 (负数的补码-1)
         * 原码(符号为不变) 10000000 00000000 00000000 00000011 =>-3
         */
        System.out.println(~2);//-3

        /*
        * >> 算术右移 00000001 => 00000000 a/b/b
        * << 算术左移 00000001 => 00000100 a*b*b
        */
        int a = 1>>2;// => 本质是 1/2/2 0
        int b = 1<<2;// => 本质是 1*2*2 4
        System.out.println(a+"/"+b);
        double s = 2d;
        double w = 2;
        System.out.println(s+"/"+w);
    }
}
